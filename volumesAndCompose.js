// Volumes -> This allow folders in our host computer that can made available to running contianers.
// With this if something change in that folder it can reflect to docker container.

// Flag -rm remove container when we stop it

const SETUP_VOLUME =
  "docker run --name containerName -p 4000:4000 --rm -v /home/path/Desktop/docker/api:/app -v /app/node_modules imageName:version";

// Here we override node modules folder and map it to docker /app

// NOTE: volumes with docker composer not work in windows. It work with linux subsystem on windows.

// Docker Compose -> A tool in dokcer to make a single docker compose file that  have all the configurations of project into a single file.
// Use when we have to run multiple images together like React App, API, MongoDB.

// Create it inside Root folder of Project where all projects.
// name it as docker-compose.yaml

// version tell docker version
// services: it is nested properties that tell docker how to build image and how to run container for it. Ther are basically project for which we want image for.

const DOCKER_COMPOSE = "docker-compose up|down";
const DOCKER_COMPOSE_REMOVE_IMAGES = "docker-compose down --rmi all -v";

const COMPOSER_EXAMPLE = `services:
  api:
    build: ./api
    container_name: api_container
    ports:
      - "4000:4000"
    volumes:
      - ./api:/app
      - /app/node_modules # Mount Path
`;

// A mount path refers to the path inside the container where a volume or host directory is attached. This allows the container to access data from the host or persist data generated by the container.
